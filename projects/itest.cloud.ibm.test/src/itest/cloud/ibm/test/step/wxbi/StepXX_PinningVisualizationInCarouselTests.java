/*********************************************************************
 * Copyright (c) 2024 IBM Corporation and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *********************************************************************/
package itest.cloud.ibm.test.step.wxbi;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;

import itest.cloud.annotation.Dependency;
import itest.cloud.ibm.entity.wxbi.conversation.WxbiVisualizationType;
import itest.cloud.ibm.test.scenario.IbmTestScenarioStepRunner;
import itest.cloud.ibm.test.scenario.wxbi.WxbiTestScenarioStep;

/**
 * This class defines a set of tests on pinning various visualizations in the carousel.
 * <p>
 * The following is a list of tests associated with this test suite:
 * <ul>
 * <li>{@link #test01_CreateConversation()}: Create the conversation.</li>
 * <li>{@link #test02_GenerateRevenueByProductLineChart()}: Generate the 'Revenue by Product Line' chart.</li>
 * <li>{@link #test03_CreateKeyMetricFromRevenueByProductLineChart()}: Open the List visualization in the 'Revenue by Product Line' chart.</li>
 * <li>{@link #test04_QuestionWhichRegionHasMostSalesByReferencingKeyMetric()}: Open the Radar visualization in the 'Revenue by Product Line' chart.</li>
 * <li>{@link #test07_SwitchThroughVisualizationsOfKeyMetric()}: Switch through the visualizations of key metric.</li>
 * <li>{@link #test08_RecreateConversation()}: Recreate the conversation.</li>
 * <li>{@link #test09_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion1()}: Switch the visualization of the key metric and ask a suggested question 1.</li>
 * <li>{@link #test10_RecreateConversationForSecondTime()}: Recreate the conversation for the second time.</li>
 * <li>{@link #test11_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion2()}: Switch the visualization of the key metric and ask a suggested question 2.</li>
 * <li>{@link #test12_RecreateConversationForThirdTime()}: Recreate the conversation for the third time.</li>
 * <li>{@link #test13_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion3()}: Switch the visualization of the key metric and ask a suggested question 3.</li>
 * <li>{@link #test14_UnpinKeyMetric()}: Open the WordCloud visualization in the 'Revenue by Product Line' chart.</li>
 * <li>{@link #test15_DeleteConversation()}: Delete the conversation.</li>
 * </ul>
 * </p>
 */
@RunWith(IbmTestScenarioStepRunner.class)
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public abstract class StepXX_PinningVisualizationInCarouselTests extends WxbiTestScenarioStep {

	private static final String TEST_CREATE_CONVERSATION = CLASS_INDICATOR_OF_DEPENDENCY + ".test01_CreateConversation";
	private static final String TEST_GENERATE_REVENUE_BY_PRODUCT_LINE_CHART = CLASS_INDICATOR_OF_DEPENDENCY + ".test02_GenerateRevenueByProductLineChart";
	private static final String TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART = CLASS_INDICATOR_OF_DEPENDENCY + ".test03_CreateKeyMetricFromRevenueByProductLineChart";
	private static final String TEST_RECREATE_CONVERSATION_FOR_THIRD_TIME = CLASS_INDICATOR_OF_DEPENDENCY + ".test12_RecreateConversationForThirdTime";
	private static final String TEST_RECREATE_CONVERSATION_FOR_SECOND_TIME = CLASS_INDICATOR_OF_DEPENDENCY + ".test10_RecreateConversationForSecondTime";
	private static final String TEST_RECREATE_CONVERSATION = CLASS_INDICATOR_OF_DEPENDENCY + ".test08_RecreateConversation";

	protected static final String QUERY_REVENUE_BY_PRODUCT_LINE = "Draw revenue by product line";
	protected static final String QUERY_REVENUE_COMPARED_TO_PLANNED_REVENUE_BY_PRODUCT_LINE = "Draw revenue compared to planned revenue by product line";
	protected static final String QUERY_TOTAL_REVENUE_GENERATED_BY_EACH_PRODUCT_TYPE_IN_EACH_MONTH = "Draw total revenue generated by each product type in each month";
	protected static final String QUERY_WHAT_DRIVES_REVENUE = "Show what drives revenue";
	protected static final String QUERY_PLANNED_REVENUE_TREND_BY_YEAR = "Draw planned revenue trend by year";

/**
 * Return the visualization type to use in this test case.
 *
 * @return The visualization type to use in this test case as {@link WxbiVisualizationType}.
 */
protected abstract WxbiVisualizationType getVisualizationType();

/**
 * Return the query to use to generate the chart.
 *
 * @return The query to use to generate the chart as {@link WxbiVisualizationType}.
 */
protected abstract String getChartGenerationQuery();

private String getChartName() {
	return getData().getPrefix() + "My Chart " + getVisualizationType().label;
}

/**
 * Create the conversation.
 */
@Test
@Dependency({TEST_SET_ACCOUNT})
public void test01_CreateConversation() {
	createConversation(getData().getConversationName(), true /*force*/, getData().getTestUser());
}

/**
 * Generate the 'Revenue by Product Line' chart.
 */
@Test
@Dependency({TEST_CREATE_CONVERSATION})
public void test02_GenerateRevenueByProductLineChart() {
	final WxbiVisualizationType type = getVisualizationType();
	submitQuestion(getChartGenerationQuery() + " as a " + type.label + " chart with title \"" + getChartName() + "\"", type /*expectedVisualizationTypeInAnswer*/);
}

/**
 * Create a key metric from 'Revenue By Product Line' chart.
 */
@Test
@Dependency({TEST_GENERATE_REVENUE_BY_PRODUCT_LINE_CHART})
public void test03_CreateKeyMetricFromRevenueByProductLineChart() {
	createKeyMetric(getData().getConversationName(), getChartName(), getVisualizationType(), false /*force*/, getData().getTestUser());
}

/**
 * Submit question 'Which region has the most sales?' by referencing the key metric.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test04_QuestionWhichRegionHasMostSalesByReferencingKeyMetric() {
	submitQuestion(QUESTION_WHICH_REGION_HAS_MOST_SALES, getChartName(), getVisualizationType(), (WxbiVisualizationType) null /*expectedVisualizationTypeInAnswer*/);
}

/**
 * Switch through the visualizations of key metric.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test07_SwitchThroughVisualizationsOfKeyMetric() {
	switchThroughVisualizationsOfKeyMetric(getChartName());
}

/**
 * Recreate the conversation.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test08_RecreateConversation() {
	createConversation(getData().getConversationName(), true /*force*/, getData().getTestUser());
}

/**
 * Switch the visualization of the key metric and ask a suggested question 1.
 */
@Test
@Dependency({TEST_RECREATE_CONVERSATION})
public void test09_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion1() {
	askSuggestedQuestion(getChartName(), 0 /*suggestedQuestionIndex*/);
}

/**
 * Recreate the conversation for the second time.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test10_RecreateConversationForSecondTime() {
	createConversation(getData().getConversationName(), true /*force*/, getData().getTestUser());
}

/**
 * Switch the visualization of the key metric and ask a suggested question 2.
 */
@Test
@Dependency({TEST_RECREATE_CONVERSATION_FOR_SECOND_TIME})
public void test11_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion2() {
	askSuggestedQuestion(getChartName(), 1 /*suggestedQuestionIndex*/);
}

/**
 * Recreate the conversation for the third time.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test12_RecreateConversationForThirdTime() {
	createConversation(getData().getConversationName(), true /*force*/, getData().getTestUser());
}

/**
 * Switch the visualization of the key metric and ask a suggested question 3.
 */
@Test
@Dependency({TEST_RECREATE_CONVERSATION_FOR_THIRD_TIME})
public void test13_SwitchVisualizationOfKeyMetricAndAskSuggestedQuestion3() {
	askSuggestedQuestion(getChartName(), 2 /*suggestedQuestionIndex*/);
}

/**
 * Unpin the key metric.
 */
@Test
@Dependency({TEST_CREATE_KEY_METRIC_FROM_REVENUE_BY_PRODUCT_LINE_CHART})
public void test14_UnpinKeyMetric() {
	unpinKeyMetric(getChartName(), getData().getTestUser());
}

/**
 * Delete the conversation.
 */
@Test
@Dependency({TEST_SET_ACCOUNT})
public void test15_DeleteConversation() {
	deleteConversation(getData().getConversationName(), getData().getTestUser());
}
}